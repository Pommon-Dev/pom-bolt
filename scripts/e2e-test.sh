#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Set to true to enable debug output
DEBUG=${DEBUG:-true}

# Debug function for logging
debug() {
  if [ "$DEBUG" = true ]; then
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo -e "${BLUE}[DEBUG ${timestamp}] $1${NC}"
  fi
}

# Error handling
error() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo -e "${RED}[ERROR ${timestamp}] $1${NC}"
  if [ "$DEBUG" = true ] && [ ! -z "$2" ]; then
    echo -e "${RED}Details: $2${NC}"
  fi
  exit 1
}

# Warning function
warning() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo -e "${YELLOW}[WARNING ${timestamp}] $1${NC}"
}

# Step function
step() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo -e "${GREEN}[STEP ${timestamp}] $1${NC}"
}

# Success function
success() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo -e "${GREEN}[SUCCESS ${timestamp}] $1${NC}"
}

# Check required environment variables
check_env() {
  step "Checking environment variables..."
  
  missing_vars=()
  
  if [ -z "$NETLIFY_API_TOKEN" ]; then
    missing_vars+=("NETLIFY_API_TOKEN")
  fi
  
  if [ -z "$GITHUB_TOKEN" ]; then
    missing_vars+=("GITHUB_TOKEN")
  fi
  
  if [ -z "$GITHUB_OWNER" ]; then
    missing_vars+=("GITHUB_OWNER")
  fi
  
  if [ ${#missing_vars[@]} -gt 0 ]; then
    error "Missing required environment variables: ${missing_vars[*]}"
  fi
  
  success "Environment variables validated"
}

# Create a test project with a simple static website
create_test_project() {
  step "Creating test project..."
  
  # Create a unique project ID
  project_id="e2e-test-$(date +%s)"
  debug "Project ID: $project_id"
  
  # Create a temporary directory for the project
  tmp_dir="/tmp/$project_id"
  mkdir -p "$tmp_dir"
  
  # Create a simple HTML file
  cat > "$tmp_dir/index.html" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>E2E Test Project</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem;
      line-height: 1.6;
    }
    h1 { color: #2563eb; }
    footer { margin-top: 2rem; font-size: 0.8rem; color: #666; }
  </style>
</head>
<body>
  <h1>E2E Test Project</h1>
  <p>This is a test project for the Netlify-GitHub deployment workflow.</p>
  <p>Project ID: $project_id</p>
  <p>Timestamp: $(date)</p>
  
  <footer>Generated by e2e-test.sh</footer>
</body>
</html>
EOF

  # Create a package.json file
  cat > "$tmp_dir/package.json" << EOF
{
  "name": "e2e-test-project",
  "version": "1.0.0",
  "description": "E2E test for Netlify-GitHub deployment",
  "scripts": {
    "build": "echo 'No build step needed for static site'"
  }
}
EOF

  # Create a netlify.toml file
  cat > "$tmp_dir/netlify.toml" << EOF
[build]
  publish = "/"
  command = "echo 'No build needed'"
EOF

  success "Test project created at $tmp_dir"
  echo "$tmp_dir"
}

# Deploy the project using the API
deploy_project() {
  local project_dir=$1
  step "Deploying project from $project_dir..."
  
  # Collect all files in the project directory
  local files_json="{"
  local first=true
  
  for file in $(find "$project_dir" -type f | sort); do
    local rel_path=${file#"$project_dir/"}
    
    # Skip hidden files and directories
    if [[ "$rel_path" == .* ]]; then
      continue
    fi
    
    if [ "$first" = true ]; then
      first=false
    else
      files_json+=","
    fi
    
    # Escape JSON special characters in the file content
    local content=$(cat "$file" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\n/\\n/g' | sed 's/\r/\\r/g' | sed 's/\t/\\t/g')
    files_json+="\"$rel_path\":\"$content\""
  done
  
  files_json+="}"
  
  debug "Files JSON prepared"
  
  # Create the request payload
  local project_name="E2E Test Project"
  local payload="{
    \"projectName\": \"$project_name\",
    \"files\": $files_json,
    \"targetName\": \"netlify-github\",
    \"setupGitHub\": true,
    \"githubCredentials\": {
      \"token\": \"$GITHUB_TOKEN\",
      \"owner\": \"$GITHUB_OWNER\"
    },
    \"netlifyCredentials\": {
      \"apiToken\": \"$NETLIFY_API_TOKEN\"
    }
  }"
  
  debug "Payload prepared, sending request to API..."
  
  # Make the API call
  local response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$payload" \
    http://localhost:3000/api/deploy)
  
  # Check if the deployment was successful
  if [[ $response == *"\"success\":true"* ]]; then
    local url=$(echo $response | grep -o '"url":"[^"]*"' | cut -d'"' -f4)
    local provider=$(echo $response | grep -o '"provider":"[^"]*"' | cut -d'"' -f4)
    local id=$(echo $response | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    
    success "Deployment successful!"
    echo "URL: $url"
    echo "Provider: $provider"
    echo "ID: $id"
    
    # Return the URL for further testing
    echo "$url"
  else
    error "Deployment failed" "$response"
  fi
}

# Check if the deployed site is accessible
verify_deployment() {
  local url=$1
  step "Verifying deployment at $url..."
  
  # Wait a bit for the deployment to propagate
  debug "Waiting 10 seconds for deployment to propagate..."
  sleep 10
  
  # Make a GET request to the URL
  local status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
  
  if [ "$status_code" = "200" ]; then
    success "Deployment verified successfully! Status code: $status_code"
  else
    warning "Deployment verification got status code: $status_code"
    debug "Trying again in 30 seconds..."
    sleep 30
    
    # Try one more time
    status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    
    if [ "$status_code" = "200" ]; then
      success "Deployment verified successfully on second attempt! Status code: $status_code"
    else
      error "Failed to verify deployment. Status code: $status_code"
    fi
  fi
}

# Main function
main() {
  echo -e "${GREEN}====================================${NC}"
  echo -e "${GREEN}= E2E Test for Netlify-GitHub Deploy =${NC}"
  echo -e "${GREEN}====================================${NC}"
  
  # Check environment variables
  check_env
  
  # Create test project
  project_dir=$(create_test_project)
  
  # Deploy the project
  deploy_url=$(deploy_project "$project_dir")
  
  # Verify the deployment
  verify_deployment "$deploy_url"
  
  # Clean up
  if [ "$DEBUG" != true ]; then
    step "Cleaning up temporary files..."
    rm -rf "$project_dir"
    success "Cleanup complete"
  else
    warning "Skipping cleanup due to DEBUG=true. Temporary files at: $project_dir"
  fi
  
  success "E2E test completed successfully!"
}

# Run the main function
main "$@" 